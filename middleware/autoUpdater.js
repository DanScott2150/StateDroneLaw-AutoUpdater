// Drone Law Updater

// Searches all 50 state legislatures for bills relating to drones
// Cross-references against laws currently listed on StateDroneLaw.com, highlights discrepancies

///// ***** OpenStates.org API Documentation: ***** /////
// http://docs.openstates.org/en/latest/api/index.html
/* Currently using v1 of the API. v2 still in alpha mode and doesn't seem to provide
    bill-search functionality (yet). Also uses GraphQL rather than REST api calls.
    Will eventually look into upgrading? */

require('dotenv').config();
const axios             = require("axios"),
      // initial version outputted OpenStates results to an excel file
        // fs                = require('fs'),
        // json2csvParser    = require('json2csv').Parser,
      autoUpdater        = {};

// 1) runUpdater() runs the updater, compiles list of all bills matching criteria
// 2) checkChanges() compares resulting list to the bills currently on StateDroneLaw.com,
//    and notes discrepancies

autoUpdater.runUpdater = function(req, res, next){
  console.log("runUpdater Running");

  var openStatesKey = process.env.OPENSTATESAPIKEY; //API key stored as environment variable
  var openStatesURL = "https://openstates.org/api/v1/";

/* Basic overview:
    1) For each state in states[] array:
        - Run two API calls to OpenStates, for keywords 'drone' & 'unmanned'
        - Loop through each result and create a Bill{} object
        - Create an allBills[] array that contains all Bill{} objects
*/

  // Done 2019: MA, FL, NJ, CA, ME, NH, VT, CT, RI, PA, GA, NC, SC, WA
  // AK, AL, AR, AZ, CA, CO, CT, DE, FL, GA
  // error: HI
  
  var states = ["IA"]; //(used for testing purposes to prevent excessive lenghty API calls. Comment in/out based on dev/prod)

// var states = ["AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE",
// "FL", "GA", "HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA",
// "MD", "ME", "MI", "MN", "MO", "MS", "MT", "NC", "ND", "NE", "NH",
// "NJ", "NM", "NV", "NY", "OH", "OK", "OR", "PA", "RI", "SC", "SD",
// "TN", "TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY"];

  var updaterResults = [];

//Function to make both API calls to OpenStates for given state
  var fn = function(state){
    console.log(state + " Start");
    return new Promise((resolve, reject) => {
      var keywordUnmanned = axios.get(`https://openstates.org/api/v1/bills/?state=${state}&q=unmanned&apikey=${openStatesKey}&search_window=all`);
      var keywordDrone = axios.get(`https://openstates.org/api/v1/bills/?state=${state}&q=drone&apikey=${openStatesKey}&search_window=all`);

      //Once both API calls are complete, loop through all results:
      var apiResults = Promise.all([keywordUnmanned, keywordDrone]).then(([unmannedResponse, droneResponse]) => {
        console.log(state + " API Calls Done");

        //Function loops through API response and creates Bill{} objects based on desired info,
        // and then adds each Bill{} to updaterResults[]
        createBillList(droneResponse, unmannedResponse);
        // createBillList(unmannedResponse);

        console.log(state + " Bill Lists Created");
        resolve();
      })
    })
  }

  //Cycle through entire states[] array, perform API Call function on each
  var data = states.map(fn);
  var results = Promise.all(data);
  results.then((bills) => {
    res.locals.allResults = updaterResults;
    console.log("runUpdater Complete");
    next();
  });

  //Loop through each bill returned via API call
  function createBillList(response1, response2){
    for(var i=0; i<response1.data.length; i++){
      let currentBill = {};

      //API call returns a ton of info, parseBillData() pulls out only the info we need
      parseBillData(currentBill, response1.data[i]);

      //Add to updaterResults[] array
      updaterResults.push(currentBill);
    }

  for (var i = 0; i < response2.data.length; i++) {
    let currentBill = {};

    //API call returns a ton of info, parseBillData() pulls out only the info we need
    parseBillData(currentBill, response2.data[i]);

    //Add to updaterResults[] array
    updaterResults.push(currentBill);
  }
}

  function parseBillData(currentBill, openStatesData){
    // unique ID generated by OpenStates system. Used to check against WordPress for if current law already exists on site
    // 2019 data doesn't seem to include an OS-assigned ID. In that case, we generate our own ID
    currentBill.osid = generateID(openStatesData);

    function generateID(input) {
      if (input.id) {
        return input.id;
      } else {
        let id = (input.state + input.session + input.bill_id).toUpperCase().replace(/\s+/g, '');
        return id;
      }
    }

    handleState(openStatesData);
    currentBill.sourceName = openStatesData.sourceName;
    // Order properties based on desired .csv column order
    // (not using .csv output anymore, but noted in case I need to re-implement at some point for some reason)

    // OpenStates API is sometimes error-prone because different states classify & present certain info differently on
    // their respective websites. Basic error checking to ensure things don't break if a couple fields are missing
    currentBill.state = openStatesData.state ? openStatesData.state : "n/a";
    currentBill.number = openStatesData.bill_id ? openStatesData.bill_id : "n/a";
    currentBill.title = openStatesData.title ? openStatesData.title : "n/a";
    currentBill.session = openStatesData.session ? openStatesData.session : "n/a";

    // NOT CURRENTLY USED. IMPLEMENT LATER    
    // 'Action' returns an array of all actions. We only care about the most recent, which is the last element in the array
    if(openStatesData.actions.length > 0){
      currentBill.action = openStatesData.actions.pop().action;
    } else {
      currentBill.action = "n/a"
    }
    
    // action_dates field returns an object with "last update" and "signed date", need to parse out into two separate values
    let lastActionFull = openStatesData.action_dates.last;

    // Remove the timestamp (format 00:00:00), leaving just the date:
    currentBill.lastAction = lastActionFull ? lastActionFull.slice(0, -9) : "n/a";

    // returns null if bill hasn't been signed into law
    currentBill.signed = openStatesData.action_dates.signed ? openStatesData.action_dates.signed : "n/a";

    // "source" data returns as an array of {'url':url} objects
    // NY has this happen frequently, for example.
    // Still need to update front-end site to display multiple sources if applicable
    // Need to extract just the actual url, rather than [{'url':url}] which is an inconvenience in spreadsheet format
    if(openStatesData.sources.length > 0){
      // if(openStatesData.sources.length === 1){
        console.log(openStatesData.sources);
        currentBill.source = openStatesData.sources[0].url;   //extract only the URL from the response
        // } else {
          //If there's multiple sources, print them all, pipe-separated
          // for(j=0; j<openStatesData.sources.length; j++){
          //   currentBill.source += openStatesData.sources[j].url + "|"
          // }
        // }
      } else {
        currentBill.source = "n/a";
      }

      

      // and we're done!
      return currentBill;
  }

  function handleState(input){
    //Basic data validation & conversion for certain states

    if(input.state === 'al'){
      input.sourceName = 'Alabama State Legislature'
      input.sources[0].url = `https://legiscan.com/AL/bill/${input.bill_id.replace(/\s+/g, '')}/2019`;
      switch (input.session) {
        case '2017rs':
          input.session = '2017';
          break;
        case '2018rs':
          input.session = '2018';
          break;
        case '2019rs':
          input.session = '2019';
          break;
      }
    }

    if(input.state === 'ar'){
      input.sourceName = 'Arkansas State Legislature'
      input.sources[0].url = `https://legiscan.com/AR/bill/${input.bill_id.replace(/\s+/g, '')}/2019`;
    }

    if(input.state === 'ct'){
      input.sourceName = 'Connecticut General Assembly';
      input.sources[0].url = `https://legiscan.com/CT/bill/${input.bill_id.replace(/\s+/g, '')}/2019`;
    }

    if (input.state === 'de') {
      input.sourceName = 'Delaware General Assembly';
      switch (input.session) {
        case '149':
          input.session = '2017 - 2018';
          break;
        case '150':
          input.session = '2019 - 2020';
          break;
      }
    }

    if (input.state === 'fl') {
      input.sourceName = 'Florida State Senate'
    }

    if(input.state === 'ma'){
      input.sourceName = 'Massachusetts State Legislature';
    }

    if(input.state === 'wa'){
      input.sourceName = "Washington State Legislature";
    }

    if(input.state === 'sc'){
      input.sourceName = "South Carolina Legislature";
    }

    if(input.state === 'nj'){
      //NJ lists sessions in numeric format, need to convert to years to be consistent with rest of site
      //i.e. "218th Session" need to convert to "2018 - 2019"
      switch(input.session){
        case '218':
          input.session = '2018 - 2019';
          break;
        case '217':
          input.session = '2017 - 2018';
          break;
        default:
          break;
      }

      //NJ's source link output is weird. Links to generic NJ bill downloads page, which links direct to PDF files.
      //Additionally, NJ's specific bill-data pages suck.
      //So instead, we generate a link to the bill on LegiScan
      input.sources[0].url = `https://legiscan.com/NJ/bill/${input.bill_id.replace(/\s+/g, '')}/2018`;
    }
    
    if(input.state === 'ca'){
      switch(input.session){
        case '20192020':
          input.session = '2019 - 2020';
          break;
        case '20172018':
          input.session = '2017 - 2018';
          break;
        default:
          break;
      }

      input.sourceName = "California State Legislature";
    }

    if(input.state === "ga"){
      input.sourceName = "Georgia General Assembly";
      switch(input.session){
        case '2017_18':
          input.session = "2017 - 2018";
          break;
        case '2019_20':
          input.session = "2019 - 2020";
          break;
        default:
          break;
      }
    }

    if(input.state === 'ri'){
      input.sourceName = "Rhode Island State Legislature"
      
      // Source Links
      //Rhode Island's state legislature website is laughably bad for bill information. Link to LegiScan instead
      //To create a link to LegiScan for resolutions, need to remove the 'R' from the bill ID. i.e. HR100 > H100
      if(input.type[0] === 'resolution'){
        let modifiedID = input.bill_id.replace("R", "");
        input.sources[0].url = `https://legiscan.com/RI/bill/${modifiedID.replace(/\s+/g, '')}/2019`;

      } else {
        input.sources[0].url = `https://legiscan.com/RI/bill/${input.bill_id.replace(/\s+/g, '')}/2019`;
      }
    }

  }

} //autoUpdater.runUpdater

autoUpdater.checkChanges = function(req, res, next){

/*
    2) Basic overview:
        - Take updaterResults[] array generated in previous function,
        - For each bill{}, make an API call to StateDroneLaw.com via WordPress API
        - Search existing posts on site, query for 'OSID', which is the unique ID
            generated by OpenStates for each piece of legislation
        - If a match is found, that means the bill already exists on the website,
            and we don't need to do anything (todo: check 'last update' date to
            auto-check if bill status might have changed)
        - If a match is not found, that means the bill needs to be added to the site.
        - Bills are sorted into a newLaws[] and existingLaws[] arrays, which then get
            passed through to the .ejs page.
*/

  console.log("Check Changes Running");
  var updaterResults = res.locals.allResults;  //updaterBills[] generated from updater function
  var newLaws = [];
  var existingLaws = [];

  // WordPress REST API query URL
  let baseURL = 'https://statedronelaw.com';
  let restURL = baseURL + `/wp-json/acf/v3/laws`;
  let filterQuery = restURL + `?osid=`

  let wp_data = updaterResults.map(wp_API);
  let wp_results = Promise.all(wp_data);
  wp_results.then(() => {
    console.log("wp_results");
    res.locals.newResults = newLaws;
    res.locals.existingResults = existingLaws;
    console.log("next()");
    next();
  });

function wp_API(law){
    return new Promise((resolve, reject) => {
      console.log("wp_API: " + law.osid);
      axios.get(filterQuery + law.osid)
      .then((response) => {
          if(response.data[0] === undefined){
            newLaws.push(law);
          } else {
            existingLaws.push(law);
          }
          resolve();
      })
      .catch((err) => {
        console.log("Catch error for: " + law.osid);
        console.log(err.data);
        // wp_API(law);
      })
    });
}

  /* Bugs:

      - 1/18: When test-running for states[PA, MN, CA, NY], resulting existingLaws[] array includes lots of bills
      that should NOT be there. It seems like they're laws that do indeed exist on StateDroneLaw.com, but
      they don't have OSID's associated with them, therefore the scraper should identify them as new. Odd.
          ==> Appears like bills without OSID's are all bills for the new 2019 legislative session, maybe
              OpenStates API hasn't updated for the new term yet.

      - Since we're running two separate API calls to OpenStates, it's possible to get two duplicate bills
      in the results, if the bill includes BOTH keywords "drone" and "unmanned". Need to add a step to
      check for duplicates.

      - Sometimes the WordPress API call starts throwing errors (status 500). When this happens, a portion
      of the bills won't end up flowing through to the .ejs template. Idk what's causing this.

      - For state PA, sometimes something weird with OpenStates action date: time value still shows up in view.
      - Some OpenStates results don't have an OSID associated with them?
  */

  /* Future ideas:

      - Batch update functionality:
        - On new/updated table, checkbox next to each row instead of individual 'add to website' buttons
        - Select multiple laws at once, then cycles you through 'add law' auto-populated page for each

      - Breadcrumb navigation for update process, ability to go back a step if needed
        - Updater Home > Run Update > Results > Add Laws
                                                  (Law 1) > (Law 2) > (Law 3) ...etc
  */

}

module.exports = autoUpdater;
